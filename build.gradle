plugins {
    id 'java'
    id 'application'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

defaultTasks 'clean', 'downloadEyes', 'run'

repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    implementation('com.github.KaptainWutax:SEED:-SNAPSHOT')
}

task downloadEyes(type: Copy) {
    def resFolder = "src/main/resources/SsgExample/"
    def f = new File(project.relativeProjectPath(resFolder + "all_12_eyes_sorted_ring_1_first.zip"))
    mkdir(resFolder)
    if (!f.exists()) {
        println("Downloading file, please wait")
        new URL('https://github.com/hube12/SSGOutput/releases/download/1.1/all_12_eyes_sorted_ring_1_first.zip').withInputStream { i -> f.withOutputStream { it << i } }
        println("Downloaded file, now extracting")
    }
    def txt = new File(project.relativeProjectPath(resFolder + "all_12_eyes_sorted_ring_1_first.txt"))
    if (!txt.exists()){
        from zipTree(f)
        into resFolder
        println("Extracting done")
    }


}
application {
    mainClassName = "SsgExample.SSG"
}

compileJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    dependsOn(downloadEyes)
}

test {
    useJUnitPlatform {
        includeEngines("junit-jupiter")
        maxHeapSize = "1G"
    }
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        outputs.upToDateWhen { false }
        showStandardStreams = true
        showExceptions true
        showCauses true
        showStackTraces true
    }
}


task fatJar(type: Jar) {
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Main-Class": project.getProperty("mainClassName")
        )
    }
    outputs.upToDateWhen { false }
    project.archivesBaseName = 'SSG'
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}